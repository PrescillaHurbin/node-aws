org: ${env:SLS_ORG}
app: node-aws
service: addresses-service
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-3
  lambdaHashingVersion: "20201221"
  apiGateway:
    apiKeys:
      - ${self:provider.stage}-client

custom:
  tableName: ${env:DYNAMODB_TABLE_NAME}
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  scripts:
    hooks:
      'aws:common:validate:validate': jest

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-scripts

package:
  individually: true

functions:
  createAddress:
    handler: lambdas/endpoints/createAddress.handler
    name: create-address
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: addresses
          method: POST
          cors: true
          private: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt DBTable.Arn
  updateAddress:
    handler: lambdas/endpoints/updateAddress.handler
    name: update-address
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: addresses/{id}
          method: PUT
          cors: true
          private: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource: !GetAtt DBTable.Arn

resources:
  Resources:
    DBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    