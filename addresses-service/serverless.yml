org: ${env:SLS_ORG}
app: node-aws
service: addresses-service
useDotenv: true

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: eu-west-3
  lambdaHashingVersion: "20201221"
  environment:
    DYNAMODB_TABLE_NAME: ${self:custom.tableName}
    GOOGLE_GEOCODE_API_KEY : ${env:GOOGLE_GEOCODE_API_KEY}
    COUNTRY_CODE: ${env:COUNTRY_CODE}
    COUNTRY_LABEL: ${env:COUNTRY_LABEL}
    BUCKET_NAME: ${env:BUCKET_NAME}
  apiGateway:
    apiKeys:
      - ${self:provider.stage}-client

custom:
  tableName: ${env:DYNAMODB_TABLE_NAME}
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  scripts:
    hooks:
      'aws:common:validate:validate': jest
  bucketName: ${env:BUCKET_NAME}

plugins:
  - serverless-iam-roles-per-function
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-plugin-scripts

package:
  individually: true

functions:
  createAddress:
    handler: lambdas/endpoints/createAddress.handler
    name: create-address
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: addresses
          method: POST
          cors: true
          private: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:PutItem"
        Resource: !GetAtt DBTable.Arn
  updateAddress:
    handler: lambdas/endpoints/updateAddress.handler
    name: update-address
    memorySize: 128 # mb
    timeout: 5 # seconds
    events:
      - http:
          path: addresses/{id}
          method: PUT
          cors: true
          private: true
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "dynamodb:UpdateItem"
          - "dynamodb:GetItem"
        Resource: !GetAtt DBTable.Arn
  storeAddress:
    name: store-address-to-s3
    handler: lambdas/endpoints/storeAddress.handler
    events:
      - stream:
          type: dynamodb
          batchSize: 1
          startingPosition: LATEST
          arn:
            Fn::GetAtt:
              - DBTable
              - StreamArn

resources:
  Resources:
    DBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    S3BucketAddress:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: ${self:custom.bucketName}
    S3BucketPermissions:
       Type: AWS::S3::BucketPolicy
       DependsOn: S3BucketAddress
       Properties:
         Bucket: ${self:custom.bucketName}
         PolicyDocument:
           Statement:
             - Principal: "*"
               Action:
                 - s3:GetObject
                 - s3:PutObject
               Effect: Allow
               Sid: "AddPerm"
               Resource: arn:aws:s3:::${self:custom.bucketName}/*
    
    